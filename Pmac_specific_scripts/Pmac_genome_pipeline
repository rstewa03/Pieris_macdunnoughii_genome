#####################
#### Environment ####
#####################

export TOOLS=/data/programs
export PM_READS=/mnt/griffin/Reads/Pieris_macdounghii_data
export PM_HOME=/mnt/griffin/racste/P_macdunnoughii
export PM_DATA=$PM_HOME/Pmac_data
export PM_ALIGN=$PM_HOME/Pmac_alignments
export PM_REF=$PM_HOME/Pmac_genome_versions
export PM_ANNOT=$PM_HOME/Pmac_annotations
export PM_POLISHED=$PM_ALIGN/NGM_genome/PmacD_qmRac4MedPur.cleaned.masked/qmRac4MedPur.cleaned.masked_polish



########################################
#### Genome versions from Vogel lab ####
########################################
cd $PM_REF
/mnt/griffin/racste/Software/seqkit stats *fasta -a
# file                         format  type  num_seqs      sum_len  min_len      avg_len     max_len       Q1         Q2         Q3  sum_gap        N50  Q20(%)  Q30(%)
# PmacD_assembly.fasta         FASTA   DNA      5,282  397,714,914      339     75,296.3   6,791,119    5,392     30,864     92,934        0    181,826       0       0
# PmacD_flyeRac4Med.fasta      FASTA   DNA     11,791  421,858,107       66       35,778   8,295,014    1,170      4,061     30,635        0    149,789       0       0
# PmacD_flyeRac4MedPur.fasta   FASTA   DNA      3,415  324,675,409       67     95,073.3   8,295,014    6,073     54,018    122,453        0    197,436       0       0
# PmacD_necatRac4Med.fasta     FASTA   DNA      1,109  477,314,139       82    430,400.5   6,456,938    1,359     59,554    515,543        0  1,491,164       0       0
# PmacD_necatRac4MedPur.fasta  FASTA   DNA        293  346,761,953      125  1,183,487.9   6,456,938  176,422  1,009,322  1,878,252        0  2,086,740       0       0
# PmacD_qmRac4MedPur.fasta     FASTA   DNA        238  348,220,470      125  1,463,111.2  14,659,823  274,922  1,147,999  2,200,014        0  2,535,264       0       0
# PmacD_Rac4MedPurge.fasta     FASTA   DNA      2,348  326,724,712       55    139,150.2   6,815,362   33,841     91,230    165,270        0    239,770       0       0

### Yu later got back to us with two  fast basecalling genomes that were made without the -meta feature enabled
# PmacD_Flye.fasta                    FASTA   DNA     10,567  431,942,183       15     40,876.5   8,259,670    2,579      6,532     41,446        0    143,108       0       0
# PmacD_Flye_Polished_Purged.fasta    FASTA   DNA     3,147  320,914,943       46    101,974.9   8,281,812    7,791     60,490    128,479        0    198,669       0       0 


####################################
#### BUSCO of original versions ####
####################################
# define configs
export BUSCO_CONFIG_FILE=/data/programs/busco-4.1.2/config/config.ini

# Run multiple
library=insecta_odb10
for i in `ls -1 *.fasta | sed 's/.fasta//'`
do
genome=$i.fasta;
outfile=${i}_v_insecta_odb10;
python3 /data/programs/busco-4.1.2/bin/busco -i $genome -l $library -m genome -o $outfile -c 30;
done

# Make plots
# Move/copy all the short summaries into a single directory
# move into that directory, or run the script referencing that directory
python3 /data/programs/busco-4.1.2/scripts/generate_plot.py -wd .

#######################################
#### Haplomerger2 on merged genome ####
#######################################

# HaploMerger2 installed locally
cd /mnt/griffin/racste/Software/HaploMerger2_20180603

# settings.
# A - remove major misjoins from the diploid assembly
# B - create the haploid assemblies, scaffold using assembly data
# C - further scaffold the haploid assemblies using MP data
# D - remove tandem errors from the haploid assembliy (use with caution)
# E - gap fill

# gather a folder of template run files where I have increased the number of cores up to 32
cp -R /data/programs/scripts/HaploMerger2_20180603/project_template_32/ . # make sure it isn't nested

# make a new folder for the genome merging you want to do, here I use "new_genome", but you can use anything
mkdir HAC_qmerge #aka new_genome in examples
export HM_DIR=/mnt/griffin/racste/Software/HaploMerger2_20180603/HAC_qmerge/
cd $HM_DIR

###########
# clean the genome
mkdir -p $HM_DIR/cleaning
cd $HM_DIR/cleaning
in=$PM_REF/PmacD_qmRac4MedPur.fasta
out=PmacD_qmRac4MedPur.cleaned.fa
cat $in | /mnt/griffin/racste/Software/HaploMerger2_20180603/bin/faDnaPolishing.pl --legalizing --maskShortPortion=1 --noLeadingN --removeShortSeq=1 > $out
cd ..

###########
# mask the genome using RED
mkdir -p $HM_DIR/masking
cd $HM_DIR/masking/
ingenome=$HM_DIR/cleaning/PmacD_qmRac4MedPur.cleaned.fa
outgenome=.
/data/programs/RED/redUnix64/Red -gnm $ingenome -msk $outgenome -rpt $outgenome -tbl red_results.txt
# output example: PmacD_qmRac4MedPur.cleaned.msk
# see what you got
more *red_results.log

# ...
# Masked genome: /mnt/griffin/chrwhe/Pieris_rapae_v1/genome_fullASM/masking/Pieris_rapae_fullAsm.softmasked.fa
# Repeat BED file: /mnt/griffin/chrwhe/Pieris_rapae_v1/genome_fullASM/masking/Pieris_rapae_fullAsm.repeats.bed
# Repeat FASTA file: /mnt/griffin/chrwhe/Pieris_rapae_v1/genome_fullASM/masking/Pieris_rapae_fullAsm.repeats.fasta
# num scaffolds: 2,772
# assembly size: 323,179,347 bp
# masked repeats: 118,710,751 bp (36.73%)

###########
# haplomerger2 run
# you should be, within this example in /software/HaploMerger2_20180603/new_genome
# where you have the older folders of cleaning and maksing

cd $HM_DIR/

# now copy necessary scripts for running scripts A, B and D
cp ../project_template_32/hm.batchB* ./ ; cp ../project_template_32/hm.batchA* ./ ; cp ../project_template_32/hm.batchD* ./
# copy necessary scripts for other parts of program
cp ../project_template/all_lastz.ctl ./ ; cp ../project_template/scoreMatrix.q ./
# copy a control script for running batches ABD
cp /data/programs/HaploMerger2_20180603/run_ABD.batch ./


# copy your cleaned and masked genome here and rename it to genome.fa.
# this is because the internal haplomerger2 scripts are written to only use
# a file name "genome.fa", and I have not changed this
cat $HM_DIR/masking/PmacD_qmRac4MedPur.cleaned.msk > genome.fa

# run haplomerger2 on the zipped, masked, cleaned genome
gzip genome.fa
sh ./run_ABD.batch >run_all_ed.log 2>&1


# haplomerger output files:
# (there will be many)

# genome_A.fa.gz ## the diploid assembly with misjoins removed
# genome_A_ref.fa.gz ## the reference haploid assembly
# genome_A_alt.fa.gz ## the alternative haploid assembly
# genome_A_ref_D.fa.gz ## the reference haploid assembly with tandems removed (use only with caution)

# you can expand these files to a more appropriate naming, which for my example would be:
zcat genome_A.fa.gz > PmacD_qmRac4MedPur.cleaned.masked.misjoins_rm.fa
zcat genome_A_ref.fa.gz > PmacD_qmRac4MedPur.cleaned.masked.haploidA.fa
zcat genome_A_ref_D.fa.gz > PmacD_qmRac4MedPur.cleaned.masked.haploidA.tndrm.fa
# original
zcat genome.fa.gz > PmacD_qmRac4MedPur.cleaned.masked.fa

mkdir final_genomes
mv *fa final_genomes/

cd $HM_DIR/final_genomes

# check quality
/mnt/griffin/racste/Software/seqkit stats PmacD*fa -a
# file                                                 format  type  num_seqs      sum_len  min_len      avg_len     max_len       Q1         Q2         Q3  sum_gap        N50  Q20(%)  Q30(%)
# PmacD_qmRac4MedPur.cleaned.masked.fa                 FASTA   DNA        238  348,220,470      125  1,463,111.2  14,659,823  274,922  1,147,999  2,200,014        0  2,535,264       0       0
# PmacD_qmRac4MedPur.cleaned.masked.haploidA.fa        FASTA   DNA        106  319,093,312      644  3,010,314.3  14,890,372  557,969  2,096,183  4,606,427        0  5,239,500       0       0
# PmacD_qmRac4MedPur.cleaned.masked.haploidA.tndrm.fa  FASTA   DNA        106  318,207,461      644  3,001,957.2  14,856,236  545,962  2,096,183  4,593,171        0  5,178,737       0       0
# PmacD_qmRac4MedPur.cleaned.masked.misjoins_rm.fa     FASTA   DNA        246  348,220,002      314  1,415,528.5  14,659,823  261,958  1,128,227  2,050,900        0  2,421,914       0       0

# Run BUSCO
export BUSCO_CONFIG_FILE=/data/programs/busco-4.1.2/config/config.ini
library=lepidoptera_odb10
for i in `ls -1 *fa | sed 's/.fa//'`
do
genome=$i.fa;
outfile=${i}_v_lepidoptera_odb10;
python3 /data/programs/busco-4.1.2/bin/busco -i $genome -l $library -m genome -o $outfile -c 30;
done


mkdir BUSCO_summaries
# Move short summaries into BUSCO_summaries
python3 /data/programs/busco-4.1.2/scripts/generate_plot.py -wd .

#############################################################
#### Polish haplomerged genome with illumina short reads ####
#### See Pmac_read_cleaning.sh, Pmac_mapping.sh #############
#############################################################

ls *sort.bam | parallel -j4 --dry-run "bash /mnt/griffin/racste/Scripts/Pilon_polish_HAC_qm_RMP_hapmerg_hapA.sh {.}.bam"

# make a directory for the polished genomes and create softlinks within the Directory
# check stats
/mnt/griffin/racste/Software/seqkit stats *fasta -a
# file                                                                                    format  type  num_seqs      sum_len  min_len      avg_len     max_len       Q1         Q2         Q3  sum_gap        N50  Q20(%)  Q30(%)
# Pmac000.1_NGM_qmRac4MedPur.cleaned.masked.haploidA.view.sort.pilon.polish.fasta         FASTA   DNA        106  316,067,271      644  2,981,766.7  14,783,675  551,127  2,080,525  4,575,637        0  5,174,956       0       0
# Pmac_Mums_NGM_qmRac4MedPur.cleaned.masked.haploidA.view.sort.pilon.polish.fasta         FASTA   DNA        106  316,549,294      644  2,986,314.1  14,824,368  554,582  2,074,755  4,567,088        0  5,202,377       0       0
# sample_Pmac000.1_NGM_qmRac4MedPur.cleaned.masked.haploidA.view.sort.pilon.polish.fasta  FASTA   DNA        106  315,993,601      644  2,981,071.7  14,778,052  550,545  2,079,798  4,579,095        0  5,170,597       0       0
# sample_Pmac_Mums_NGM_qmRac4MedPur.cleaned.masked.haploidA.view.sort.pilon.polish.fasta  FASTA   DNA        106  316,460,383      644  2,985,475.3  14,821,744  553,966  2,076,670  4,564,711        0  5,202,848       0       0

# run BUSCO analysis
export BUSCO_CONFIG_FILE=/data/programs/busco-4.1.2/config/config.ini
# Run multiple
library=lepidoptera_odb10
for i in `ls -1 *fasta | sed 's/.fasta//'`
do
genome=$i.fasta;
outfile=${i}_v_lepidoptera_odb10;
python3 /data/programs/busco-4.1.2/bin/busco -i $genome -l $library -m genome -o $outfile -c 30;
done

mkdir BUSCO_summaries
cd BUSCO_summaries
# move short summaries into BUSCO_summaries
python3 /data/programs/busco-4.1.2/scripts/generate_plot.py -wd .

#########################################################
#### Move/softlink target genome versions to $PM_REF ####
#########################################################

# remove white space from unpolished genome


# Rename chromosomes in each of the three main chromosomes
# cat Pmac000.1_unpolished.fasta | sed 's/>/>Pmacd_v0.08_/g' > Pmac000.1_unpolished.nh.fasta
# cat Pmac000.1_polished.fasta | sed 's/>/>Pmacd_v0.09_/g' > Pmac000.1_polished.nh.fasta
# cat PmacMums_polished.fasta | sed 's/>/>Pmacd_v0.10_/g' > PmacMums_polished.nh.fasta
# 
# sed 's/>/>Pmac_v1_/g' > Pmac000.1_polished.ragtag_i80.nh.fasta




################################
#### Clean degenerate bases ####
################################
mdkir $PM_REF/faDnaPolishing
cd $PM_REF/faDnaPolishing

in=../Pieris_napi_fullAsm.fasta
out=Pieris_napi_fullAsm.cleaned.fasta
cat $in | /mnt/griffin/chrwhe/software/HaploMerger2_20180603/bin/faDnaPolishing.pl --legalizing --maskShortPortion=1 --noLeadingN --removeShortSeq=1 > $out

in=../Pmac000.1_polished.fasta
out=Pmac000.1_polished.cleaned.fasta
cat $in | /mnt/griffin/chrwhe/software/HaploMerger2_20180603/bin/faDnaPolishing.pl --legalizing --maskShortPortion=1 --noLeadingN --removeShortSeq=1 > $out
# no degenerate bases

in=../Pmac000.1_unpolished_noBlank.fasta
out=Pmac000.1_unpolished.cleaned.fasta
cat $in | /mnt/griffin/chrwhe/software/HaploMerger2_20180603/bin/faDnaPolishing.pl --legalizing --maskShortPortion=1 --noLeadingN --removeShortSeq=1 > $out
# no degenerate bases

in=../PmacMums_polished.fasta
out=PmacMums_polished.cleaned.fasta
cat $in | /mnt/griffin/chrwhe/software/HaploMerger2_20180603/bin/faDnaPolishing.pl --legalizing --maskShortPortion=1 --noLeadingN --removeShortSeq=1 > $out


######################
#### Soft masking ####
######################
mkdir $PM_REF/faDnaPolishing/masking
cd $PM_REF/faDnaPolishing/masking

export PATH=/data/programs/RED/redUnix64/:$PATH

python /mnt/griffin/chrwhe/software/redmask/redmask.py -i ../Pmac000.1_polished.cleaned.fasta -o Pmac000.1_polished.cleaned > Pmac000.1_polished.cleaned.results.log

#     Contigs: 106
#     Length:  316,067,271 bp
#     nN50:    5,174,956 bp
# num scaffolds: 106
# assembly size: 316,067,271 bp
# masked repeats: 110,402,935 bp (34.93%)

python /mnt/griffin/chrwhe/software/redmask/redmask.py -i ../Pmac000.1_unpolished.cleaned.fasta -o Pmac000.1_unpolished.cleaned > Pmac000.1_unpolished.cleaned.results.log
#     Contigs: 106
#     Length:  319,093,312 bp
#     nN50:    5,239,500 bp
# num scaffolds: 106
# assembly size: 319,093,312 bp
# masked repeats: 112,367,295 bp (35.21%)

python /mnt/griffin/chrwhe/software/redmask/redmask.py -i ../Pieris_napi_fullAsm.cleaned.fasta -o Pieris_napi_fullAsm.cleaned > Pieris_napi_fullAsm.cleaned.results.log
#     Contigs: 2,969
#     Length:  349,759,982 bp
#     nN50:    12,597,868 bp
# num scaffolds: 2,969
# assembly size: 349,759,982 bp
# masked repeats: 93,152,465 bp (26.63%)

python /mnt/griffin/chrwhe/software/redmask/redmask.py -i ../PmacMums_polished.cleaned.fasta -o PmacMums_polished.cleaned > PmacMums_polished.cleaned.results.log
#     Contigs: 106
#     Length:  316,549,294 bp
#     nN50:    5,202,377 bp
# num scaffolds: 106
# assembly size: 316,549,294 bp
# masked repeats: 110,888,987 bp (35.03%)


#################################
#### Hardmask with bedtools2 ####
#################################
# Tool:    bedtools maskfasta (aka maskFastaFromBed)
# Version: v2.26.0
# Summary: Mask a fasta file based on feature coordinates.
#
# Usage:   bedtools maskfasta [OPTIONS] -fi <fasta> -fo <fasta> -bed <bed/gff/vcf>
#
# Options:
#         -fi     Input FASTA file
#         -bed    BED/GFF/VCF file of ranges to mask in -fi
#         -fo     Output FASTA file
#         -soft   Enforce "soft" masking.  That is, instead of masking with Ns,
#                 mask with lower-case bases.
#         -mc     Replace masking character.  That is, instead of masking
#                 with Ns, use another character.

/data/programs/bedtools2/bin/maskFastaFromBed -fi ../Pieris_napi_fullAsm.cleaned.fasta -fo Pieris_napi_fullAsm.cleaned.hardmasked.fa -bed Pieris_napi_fullAsm.cleaned.repeats.bed
/data/programs/bedtools2/bin/maskFastaFromBed -fi ../Pmac000.1_polished.cleaned.fasta -fo Pmac000.1_polished.cleaned.hardmasked.fa  -bed Pmac000.1_polished.cleaned.repeats.bed
/data/programs/bedtools2/bin/maskFastaFromBed -fi ../Pmac000.1_unpolished.cleaned.fasta -fo Pmac000.1_unpolished.cleaned.hardmasked.fa  -bed Pmac000.1_unpolished.cleaned.repeats.bed
/data/programs/bedtools2/bin/maskFastaFromBed -fi ../PmacMums_polished.cleaned.fasta -fo PmacMums_polished.cleaned.hardmasked.fa  -bed PmacMums_polished.cleaned.repeats.bed


############################################
#### Generate an alignment with Sibeliaz ####
############################################
mkdir -p /mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/pseudochromosomal/Pieris_napi_fullAsm_Pmac000.1_polished_out
cd $PM_REF/pseudochromosomal

# /data/programs/SibeliaZ/SibeliaZ-LCB/bin/sibeliaz  -h
# Usage: [-k <odd integer>] [-b <integer>] [-m <integer>] [-a <integer>] [-t <integer>] [-f <integer>] [-o <output_directory>] [-n] <input file>

# usage sibeliaz genome1.fa genome2.fa
# reference and query genomes
# make sure these are soft masked before running
# SibeliaZ and TwoPaCo currently do not recognize soft-masked characters (i.e. using lowercase characters), so please convert soft-masked repeats to hard-maksed ones (with Ns) if you would like to mask the repeats explicitly. However, it is not necessary as SibeliaZ uses the abundance parameter -a to filter out high-copy repeats.
ref_genome=/mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/faDnaPolishing/Pieris_napi_fullAsm.cleaned.fasta
draft_genome=/mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/faDnaPolishing/Pmac000.1_polished.cleaned.fasta
out_file=Pieris_napi_fullAsm_Pmac000.1_polished.out
# this is set to 20 cores, and 500 gb of RAM
/data/programs/SibeliaZ/SibeliaZ-LCB/bin/sibeliaz -t 20 -f 500 -o $out_file $ref_genome $draft_genome

# may have to move the .maf to the out file?
# repeat with unpolished
$PM_REF/pseudochromosomal
ref_genome=/mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/faDnaPolishing/masking/Pieris_napi_fullAsm.cleaned.hardmasked.fa
draft_genome=/mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/faDnaPolishing/masking/Pmac000.1_unpolished.cleaned.hardmasked.fa
out_file=Pieris_napi_fullAsm_Pmac000.1_unpolished.out
# this is set to 20 cores, and 500 gb of RAM
/data/programs/SibeliaZ/SibeliaZ-LCB/bin/sibeliaz -t 20 -f 500 -o $out_file $ref_genome $draft_genome

########################################################
#### Create pseudochromosomal alignment with RagTag ####
########################################################
# https://github.com/malonge/RagTag/wiki
cd $PM_REF/pseudochromosomal/RagTag

# note that you should use soft links into the folder you are working, as it wants to make an index file
ln -s /mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/faDnaPolishing/Pieris_napi_fullAsm.cleaned.fasta .
ln -s /mnt/griffin/Pierinae_genomes/Pieris_napi_genome_v1.1/genome/Pieris_napi_fullAsm_chomoOnly.fasta Pieris_napi_fullAsm_chromoOnly.fasta
ln -s /mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/Pmac000.1_unpolished.fasta .
ln -s /mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/Pmac000.1_polished.fasta .
ln -s /mnt/griffin/racste/P_macdunnoughii/Pmac_genome_versions/PmacMums_polished.fasta .

cd $PM_REF/pseudochromosomal/RagTag
# provide aligner. Uses minimap or nucmer
export PATH=$PATH:/data/programs/mummer-4.0.0beta2/
# define reference
# reference=Pieris_napi_fullAsm.cleaned
reference=Pieris_napi_fullAsm_chromoOnly
for i in `ls -1 Pmac*fasta | sed 's/.fasta//'`
do
  #defines the query fasta(s)
  query=$i;
  #creates a unique prefix
  prefix=${i}_against_${reference}_i.80;
  #runs the ragtag script with the reference.fasta and the query.fasta and the outfile named with the prefix
  python3 /data/programs/RagTag/ragtag_scaffold.py $reference.fasta $i.fasta -o $prefix.out -t 10 --aligner nucmer -i 0.8;
  # move into the output folder
  cd $prefix.out;
  # convert the delta file into a coords table that can be used to make a circos plot
  #$TOOLS/mummer-4.0.0beta2/show-coords -r -c -l query_against_ref.delta > $prefix.coords;
  #cat $prefix.coords | sed 1,5d | tr -s ' ' | awk 'BEGIN {FS=" "; OFS=","} {;print $1,$2,$4,$5,$7,$8,$10,$12,$13,$18,$19}' > $prefix.filt.coords;
  # rename the generic ragtag output with the prefix
  for k in `ls -1 ragtag*`
  do
    mv $k $prefix.$k;
  done
  for l in `ls -1 query_against_ref* | sed 's/query_against_ref.//'`
  do
    mv query_against_ref.$l $prefix.$l;
  done
  cd ..
done
